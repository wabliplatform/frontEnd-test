/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Test from '../model/Test';

/**
* Test service.
* @module api/TestApi
* @version 1.0.0
*/
export default class TestApi {

    /**
    * Constructs a new TestApi. 
    * @alias module:api/TestApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createtest operation.
     * @callback module:api/TestApi~createtestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Test} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Test} test data to be created
     * @param {module:api/TestApi~createtestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Test}
     */
    createtest(test, callback) {
      let postBody = test;
      // verify the required parameter 'test' is set
      if (test === undefined || test === null) {
        throw new Error("Missing the required parameter 'test' when calling createtest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Test;
      return this.apiClient.callApi(
        '/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletetest operation.
     * @callback module:api/TestApi~deletetestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} testId the Id parameter
     * @param {module:api/TestApi~deletetestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletetest(testId, callback) {
      let postBody = null;
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling deletetest");
      }

      let pathParams = {
        'testId': testId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/test/{testId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlltest operation.
     * @callback module:api/TestApi~getAlltestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Test>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/TestApi~getAlltestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Test>}
     */
    getAlltest(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Test];
      return this.apiClient.callApi(
        '/test/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gettest operation.
     * @callback module:api/TestApi~gettestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Test} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} testId the Id parameter
     * @param {module:api/TestApi~gettestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Test}
     */
    gettest(testId, callback) {
      let postBody = null;
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling gettest");
      }

      let pathParams = {
        'testId': testId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Test;
      return this.apiClient.callApi(
        '/test/{testId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatetest operation.
     * @callback module:api/TestApi~updatetestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Test} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} testId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Test} opts.test data to be updated
     * @param {module:api/TestApi~updatetestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Test}
     */
    updatetest(testId, opts, callback) {
      opts = opts || {};
      let postBody = opts['test'];
      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling updatetest");
      }

      let pathParams = {
        'testId': testId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Test;
      return this.apiClient.callApi(
        '/test/{testId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
